# Generated from lib/rspec/sse/matchers.rb with RBS::Inline

module RSpec
  module Matchers
    # Matches if the response body ends with "\n\n" (SSE graceful close)
    # @rbs return: RSpec::SSE::Matchers::BeGracefullyClosed
    def be_gracefully_closed: () -> RSpec::SSE::Matchers::BeGracefullyClosed

    # Matches if the response indicates successfully SSE connection opened
    #
    # @rbs return: RSpec::SSE::Matchers::BeSuccessfullyOpened
    def be_successfully_opened: () -> RSpec::SSE::Matchers::BeSuccessfullyOpened

    # Matches if the response's events match the expected events in order
    #
    # @rbs *events: ssePayload | Array[ssePayload]
    # @rbs json: bool
    # @rbs return: RSpec::SSE::Matchers::BeEvents
    def be_events: (*ssePayload | Array[ssePayload] events, ?json: bool) -> RSpec::SSE::Matchers::BeEvents

    # Matches if the response's event types match the expected types in order
    #
    # @rbs *types: String | Array[String]
    # @rbs return: RSpec::SSE::Matchers::BeEventTypes
    def be_event_types: (*String | Array[String] types) -> RSpec::SSE::Matchers::BeEventTypes

    # Matches if the response's event data match the expected data in order
    #
    # @rbs *data: String | Array[String] | Array[Hash[String, untyped]]
    # @rbs json: bool
    # @rbs return: RSpec::SSE::Matchers::BeEventData
    def be_event_data: (*String | Array[String] | Array[Hash[String, untyped]] data, ?json: bool) -> RSpec::SSE::Matchers::BeEventData

    # Matches if the response's event IDs match the expected IDs in order
    #
    # @rbs *ids: String
    # @rbs return: RSpec::SSE::Matchers::BeEventIds
    def be_event_ids: (*String ids) -> RSpec::SSE::Matchers::BeEventIds

    # Matches if the response's reconnection times match the expected times in order
    #
    # @rbs *times: Integer | Array[Integer]
    # @rbs return: RSpec::SSE::Matchers::BeReconnectionTimes
    def be_reconnection_times: (*Integer | Array[Integer] times) -> RSpec::SSE::Matchers::BeReconnectionTimes

    # Matches if the response's events contain the expected events regardless of order
    #
    # @rbs *events: ssePayload | Array[ssePayload]
    # @rbs json: bool
    # @rbs return: RSpec::SSE::Matchers::ContainExactlyEvents
    def contain_exactly_events: (*ssePayload | Array[ssePayload] events, ?json: bool) -> RSpec::SSE::Matchers::ContainExactlyEvents

    # Matches if the response's event types contain the expected types regardless of order
    #
    # @rbs *types: String | Array[String]
    # @rbs return: RSpec::SSE::Matchers::ContainExactlyEventTypes
    def contain_exactly_event_types: (*String | Array[String] types) -> RSpec::SSE::Matchers::ContainExactlyEventTypes

    # Matches if the response's event data contain the expected data regardless of order
    #
    # @rbs *data: String | Array[String] | Array[Hash[String, untyped]]
    # @rbs json: bool
    # @rbs return: RSpec::SSE::Matchers::ContainExactlyEventData
    def contain_exactly_event_data: (*String | Array[String] | Array[Hash[String, untyped]] data, ?json: bool) -> RSpec::SSE::Matchers::ContainExactlyEventData

    # Matches if the response's event IDs contain the expected IDs regardless of order
    #
    # @rbs *ids: String | Array[String]
    # @rbs return: RSpec::SSE::Matchers::ContainExactlyEventIds
    def contain_exactly_event_ids: (*String | Array[String] ids) -> RSpec::SSE::Matchers::ContainExactlyEventIds

    # Matches if the response's reconnection times contain the expected times regardless of order
    #
    # @rbs *times: Integer | Array[Integer]
    # @rbs return: RSpec::SSE::Matchers::ContainExactlyReconnectionTimes
    def contain_exactly_reconnection_times: (*Integer | Array[Integer] times) -> RSpec::SSE::Matchers::ContainExactlyReconnectionTimes

    # Matches if the response's events include all the expected events
    #
    # @rbs *events: ssePayload
    # @rbs json: bool
    # @rbs return: RSpec::SSE::Matchers::HaveEvents
    def have_events: (*ssePayload events, ?json: bool) -> RSpec::SSE::Matchers::HaveEvents

    # Matches if the response's event types include all the expected types
    #
    # @rbs *types: String | Array[String]
    # @rbs return: RSpec::SSE::Matchers::HaveEventTypes
    def have_event_types: (*String | Array[String] types) -> RSpec::SSE::Matchers::HaveEventTypes

    # Matches if the response's event data include all the expected data
    #
    # @rbs *data: String | Array[String] | Array[Hash[String, untyped]]
    # @rbs json: bool
    # @rbs return: RSpec::SSE::Matchers::HaveEventData
    def have_event_data: (*String | Array[String] | Array[Hash[String, untyped]] data, ?json: bool) -> RSpec::SSE::Matchers::HaveEventData

    # Matches if the response's event IDs include all the expected IDs
    #
    # @rbs *ids: String
    # @rbs return: RSpec::SSE::Matchers::HaveEventIds
    def have_event_ids: (*String ids) -> RSpec::SSE::Matchers::HaveEventIds

    # Matches if the response's reconnection times include all the expected times
    #
    # @rbs *times: Integer
    # @rbs return: RSpec::SSE::Matchers::HaveReconnectionTimes
    def have_reconnection_times: (*Integer times) -> RSpec::SSE::Matchers::HaveReconnectionTimes
  end
end

module RSpec
  module SSE
    module Matchers
      class SseParser
        # @rbs body: String
        # @rbs return: Array[ssePayload]
        def self.parse: (String body) -> Array[ssePayload]
      end

      class BaseMatcher
        @expected: Array[Object]

        @actual: Object

        @parsed_events: Array[ssePayload]

        @json: bool

        # Initialize the matcher with expected values
        #
        # @rbs expected: Array[Object]
        # @rbs return: RSpec::SSE::Matchers::BaseMatcher
        def initialize: (Array[Object] expected, ?json: untyped) -> RSpec::SSE::Matchers::BaseMatcher

        # @rbs actual: Object
        # @rbs return: bool
        def matches?: (Object actual) -> bool

        # @rbs return: String
        def failure_message: () -> String

        # @rbs return: String
        def failure_message_when_negated: () -> String

        private

        # @rbs obj: Object
        # @rbs return: String
        def description_for: (Object obj) -> String

        # @rbs return: Array[Object]
        def extract_actual: () -> Array[Object]

        # @rbs return: String
        def description: () -> String

        # @rbs return: bool
        def match_condition: () -> bool
      end

      class BeGracefullyClosed
        @actual: Object

        # Match if the response body ends with "\n\n" (SSE graceful close)
        #
        # @rbs actual: Object
        # @rbs return: bool
        def matches?: (Object actual) -> bool

        # @rbs return: String
        def failure_message: () -> String

        # @rbs return: String
        def failure_message_when_negated: () -> String

        # @rbs return: String
        def description: () -> String
      end

      class BeSuccessfullyOpened
        @actual: Object

        # Match if the header and status code indicate a successful SSE connection
        #
        # @rbs actual: Object
        # @rbs return: bool
        def matches?: (Object actual) -> bool

        # @rbs return: String
        def failure_message: () -> String

        # @rbs return: String
        def failure_message_when_negated: () -> String

        # @rbs return: String
        def description: () -> String
      end

      class ExactMatcher < BaseMatcher
        # Match if extracted actual values exactly match expected values
        #
        # @rbs return: bool
        def match_condition: () -> bool

        # @rbs return: String
        def description: () -> String
      end

      # Base matcher for contain exactly matching (order doesn't matter)
      class ContainExactlyMatcher < BaseMatcher
        # Match if extracted actual values match expected values in any order
        #
        # @rbs return: bool
        def match_condition: () -> bool

        # @rbs return: String
        def description: () -> String
      end

      # Base matcher for inclusion matching (subset)
      class IncludeMatcher < BaseMatcher
        # Match if extracted actual values include all expected values
        #
        # @rbs return: bool
        def match_condition: () -> bool

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for be_events
      class BeEvents < ExactMatcher
      end

      # Matcher for contain_exactly_events
      class ContainExactlyEvents < ContainExactlyMatcher
      end

      # Matcher for have_events
      class HaveEvents < IncludeMatcher
      end

      module TypeExtractor
        private

        # Extract event types from parsed events
        #
        # @rbs return: Array[String|nil]
        def extract_actual: () -> Array[String | nil]
      end

      # Matcher for be_event_types
      class BeEventTypes < ExactMatcher
        include TypeExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for contain_exactly_event_types
      class ContainExactlyEventTypes < ContainExactlyMatcher
        include TypeExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for have_event_types
      class HaveEventTypes < IncludeMatcher
        include TypeExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      module DataExtractor
        private

        # Extract event data from parsed events
        # If :json option is enabled, attempt to parse the data as JSON
        #
        # @rbs return: Array[String|Hash[String, untyped]]
        def extract_actual: () -> Array[String | Hash[String, untyped]]
      end

      # Matcher for be_event_data
      class BeEventData < ExactMatcher
        include DataExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for contain_exactly_event_data
      class ContainExactlyEventData < ContainExactlyMatcher
        include DataExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for have_event_data
      class HaveEventData < IncludeMatcher
        include DataExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      module IdExtractor
        private

        # Extract event IDs from parsed events
        #
        # @rbs return: Array[String|nil]
        def extract_actual: () -> Array[String | nil]
      end

      # Matcher for be_event_ids
      class BeEventIds < ExactMatcher
        include IdExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for contain_exactly_event_ids
      class ContainExactlyEventIds < ContainExactlyMatcher
        include IdExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for have_event_ids
      class HaveEventIds < IncludeMatcher
        include IdExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      module RetryExtractor
        private

        # Extract reconnection times from parsed events
        #
        # @rbs return: Array[Integer|nil]
        def extract_actual: () -> Array[Integer | nil]
      end

      # Matcher for be_reconnection_times
      class BeReconnectionTimes < ExactMatcher
        include RetryExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for contain_exactly_reconnection_times
      class ContainExactlyReconnectionTimes < ContainExactlyMatcher
        include RetryExtractor

        private

        # @rbs return: String
        def description: () -> String
      end

      # Matcher for have_reconnection_times
      class HaveReconnectionTimes < IncludeMatcher
        include RetryExtractor

        private

        # @rbs return: String
        def description: () -> String
      end
    end
  end
end

type ssePayload = { type: String?, data: String, id: String?, retry: Integer }
